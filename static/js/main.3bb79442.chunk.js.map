{"version":3,"sources":["componentes/Buscador.js","componentes/Imagen.js","componentes/Paginacion.js","componentes/Resultado.js","componentes/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Buscador","busquedaRef","React","createRef","obtenerDatos","e","preventDefault","termino","current","value","props","datosBusqueda","onSubmit","this","className","ref","type","placeholder","Component","Imagen","imagen","largeImageURL","likes","previewURL","tags","views","href","rel","src","alt","Paginacion","onClick","paginaAnterior","paginaSiguiente","Resultado","mostrarImagenes","imagenes","lenght","Fragment","map","key","id","Footer","App","state","pagina","scroll","document","querySelector","scrollIntoView","setState","consultarApi","url","console","log","fetch","then","respuesta","json","resultado","hits","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3bb79442.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Buscador extends Component {\r\n  busquedaRef = React.createRef();\r\n\r\n  obtenerDatos = e => {\r\n    e.preventDefault();\r\n    //tomamos el valor de input\r\n    const termino = this.busquedaRef.current.value;\r\n    //console.log(this.busquedaRef.current.value);\r\n\r\n    //Lo enviamos al componente principal\r\n    this.props.datosBusqueda(termino);\r\n  };\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.obtenerDatos}>\r\n        <div className=\"row\">\r\n          <div className=\"form-group col-md-8\">\r\n            <input ref={this.busquedaRef} type=\"text\" className=\"form-control form-control-lg\" placeholder=\"Search your image: e.g: Soccer\" ></input>\r\n          </div>\r\n          <div className=\"form-group col-md-4\">\r\n            <input type=\"submit\" className=\"btn btn-lg btn-danger btn-block\" value=\"Search\" ></input>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nexport default Buscador;\r\n","import React from 'react';\r\n\r\n\r\nconst Imagen = (props) => {\r\n\r\n    const { largeImageURL, likes, previewURL, tags, views } = props.imagen;\r\n\r\n    return (\r\n        <div className=\"col-12 col-sm-6 col-md-4 col-lg-3 mb-4\">\r\n            <div className=\"card\">\r\n                <a href={largeImageURL} rel=\"noopener noreferrer\"><img src={previewURL} alt={tags} className=\"card-img-top image-fluid\"/></a>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <p className=\"card-text\">{likes} Me gusta</p>\r\n                <p className=\"card-text\">{views} Vistas</p>\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default Imagen;","import React from 'react';\r\n\r\nconst Paginacion = (props) => {\r\n    return (\r\n        <div className=\"py-3\">\r\n            <button onClick={props.paginaAnterior} type=\"button\" className=\"btn btn-info btn-lg mr-5\">&larr; </button>\r\n            <button onClick={props.paginaSiguiente} type=\"button\" className=\"btn btn-info btn-lg\"> &rarr;</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginacion;\r\n","import React, { Component } from 'react';\r\nimport Imagen from './Imagen';\r\nimport Paginacion from './Paginacion';\r\n\r\nclass Resultado extends Component{\r\n  \r\n    mostrarImagenes = () => {\r\n\r\n        const imagenes = this.props.imagenes;\r\n\r\n        if (imagenes.lenght === 0) return null;\r\n\r\n        //console.log(imagenes);\r\n        \r\n        \r\n        return (\r\n             <React.Fragment>\r\n                <div className=\"col-12 p-5 row\">\r\n                    {imagenes.map(imagen => (\r\n                        <Imagen\r\n                            key={imagen.id}\r\n                            imagen={imagen}\r\n                        />\r\n                    ))}\r\n                </div>\r\n                <Paginacion\r\n                    paginaAnterior={this.props.paginaAnterior}\r\n                    paginaSiguiente={this.props.paginaSiguiente}\r\n                />\r\n            </React.Fragment>\r\n        )\r\n           \r\n        \r\n   \r\n    }\r\n   \r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {this.mostrarImagenes()}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Resultado;","import React from 'react'\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div className=\"row\">\r\n            <p>By Tony Rodz © 2020 v1.0 </p>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default Footer;","import React, { Component } from \"react\";\nimport Buscador from \"./componentes/Buscador\";\nimport Resultado from \"./componentes/Resultado\";\nimport Footer from \"./componentes/Footer\";\n\nclass App extends Component {\n\n  state = {\n    termino: '',\n    imagenes: [],\n    pagina:''\n  }\n\n  scroll = () => {\n    const elemento = document.querySelector('.jumbotron');\n    elemento.scrollIntoView('smooth', 'start');\n  }\n\n  paginaAnterior = () => {\n    //leer el state de la pagina actual\n    let pagina = this.state.pagina;\n\n    //si la página es 1 ya no restar\n    if (pagina === 1) return null;\n    \n    //restar 1 a la pagina actual\n    pagina -= 1;\n    //agregar el cambio\n     this.setState({\n      pagina\n     }, () => {\n         this.consultarApi();\n         this.scroll();\n    })\n\n    //console.log(pagina);\n    \n  }\n  paginaSiguiente = () => {\n   //leer el state de la pagina actual\n    let pagina = this.state.pagina;\n    \n    //sumar 1 a la pagina actual\n    pagina += 1;\n    //agregar el cambio\n    this.setState({\n      pagina\n    }, () => {\n        this.consultarApi();\n        this.scroll();\n    })\n\n    //console.log(pagina);\n    \n    \n  }\n\n  consultarApi = () => {\n    const termino = this.state.termino;\n    const pagina = this.state.pagina;\n    const url = `https://pixabay.com/api/?key=15445030-0240a0631ee7a86760b0abfd5&q=${termino}&per_page=30&page=${pagina}`;\n    \n    console.log(url);\n    fetch(url)\n      .then(respuesta => respuesta.json())\n      .then(resultado=>this.setState({imagenes:resultado.hits}))\n    \n    \n\n  }\n\n  datosBusqueda = termino => {\n    this.setState({\n      termino: termino,\n      pagina:1\n    }, () => {\n        this.consultarApi();\n    })\n  }\n\n \n\n  render() {\n    return (\n      <div className=\"app container\">\n        <div className=\"jumbotron\">\n          <h1 className=\" text-center\">IMAGE FINDER</h1>\n          <p className=\"lead text-center\">Powered by Pixabay</p>\n          <Buscador datosBusqueda={this.datosBusqueda} />\n        </div>\n\n        <div className=\"row justify-content-center\">\n          <Resultado\n            imagenes={this.state.imagenes} \n            paginaAnterior={this.paginaAnterior}\n            paginaSiguiente={this.paginaSiguiente}\n            \n          />\n        </div>\n        <div className=\" row justify-content-center navbar navbar-fixed-bottom mt-5 pt-5\">\n          <Footer />\n        </div>\n\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}